function PyrBehALNoCueAlignedTime(onlyRun)
% compare no cue behavior with AL behavior (only the initial recordings from AL to match the conditions)
% plot aligned to run and over distance (onlyRun should be set to 0)

    RecordingListPyrInt;  % include all the early NoCue (no blackout), PL and AL (up to A057)    
    pathAnal = ['Z:\Yingxue\Draft\PV\PyramidalBehALNoCueAlignedTime\'];
    if(exist(pathAnal) == 0)
        mkdir(pathAnal);
    end
    
    if(exist([pathAnal 'behNoCueVsAL_AlignedtoRunOverTime.mat']))
        load([pathAnal 'behNoCueVsAL_AlignedtoRunOverTime.mat']);
    end
   
    if(exist('behMeanNoCue') == 0)
        [behNoCue,behMeanNoCue] = accumBehRun(listRecordingsNoCuePath,...
                listRecordingsNoCueFileName,mazeSessionNoCue,1,onlyRun);

        [behAL,behMeanAL] = accumBehRun(listRecordingsActiveLickPath(1:10,:),...
                listRecordingsActiveLickFileName(1:10,:),mazeSessionActiveLick(1:10),2,onlyRun);
            % only included the recordings before starting stimulation
    
    
        behMeanStat = accumMeanBehStatALNocue(behAL,behNoCue,behMeanAL,behMeanNoCue);

        save([pathAnal 'behNoCueVsAL_AlignedtoRunOverTime.mat'],...
            'behNoCue','behAL','behMeanNoCue','behMeanAL','behMeanStat');
    end
    
    
    plotBehMeanALNoCueTime(pathAnal,behAL,behNoCue,behMeanStat);
    
    plotLick(pathAnal,behNoCue.spaceStepsLick,...
        behMeanNoCue.lickTraceAll,...
        behMeanAL.lickTraceAll,[{'NoCue'} {'AL'}],...
        [pathAnal 'LickVsTime-NoCueAL']);
    
    plotSpeed(pathAnal,behNoCue.spaceStepsSpeed,...
        behMeanNoCue.speedTraceAll,...
        behMeanAL.speedTraceAll,[{'NoCue'} {'AL'}],...
        [pathAnal 'SpeedVsTime-NoCueAL']);
    
    plotLick(pathAnal,behNoCue.spaceStepsLick,...
        behNoCue.meanLickPerRec,...
        behAL.meanLickPerRec,[{'NoCue'} {'AL'}],...
        [pathAnal 'MeanLickVsTime-NoCueAL']);
    
    plotSpeed(pathAnal,behNoCue.spaceStepsSpeed,...
        behNoCue.meanSpeedPerRec,...
        behAL.meanSpeedPerRec,[{'NoCue'} {'AL'}],...
        [pathAnal 'MeanSpeedVsTime-NoCueAL']);
    
end

function [beh,behMean] = accumBehRun(paths,filenames,mazeSess,task,onlyRun)
    randTrNo = 15;
    
    numRec = size(paths,1);
    beh = struct('task',[],...% no cue - 1, AL - 2, PL - 3
            'indRec',[],... % recording index for all the recordings
            'spaceStepsLick',[],...
            'spaceStepsSpeed',[],...
            ...
            'meanLickPerRec',[],... % mean lick profile per recording
            'semLickPerRec',[],... % mean lick trace per recording
            'lickTracePerRec',{cell(1,numRec)},...
            ...
            'meanSpeedPerRec',[],... % mean speed trace per recording
            'semSpeedPerRec',[],... % mean speed trace per recording
            'speedTracePerRec',{cell(1,numRec)});
      
    for i = 1:numRec
        fullPathLick = [filenames(i,:) '_lickTime_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];
        fullPath = [paths(i,:) fullPathLick];
        if(exist(fullPath) == 0)
            disp('_lickTime.mat file does not exist.');
            return;
        end
        load(fullPath,'lickOverTime','param');
        paramLick = param;
                   
        fullPathSpeed = [filenames(i,:) '_runSpeedTime_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];
        fullPath = [paths(i,:) fullPathSpeed];
        if(exist(fullPath) == 0)
            disp('_runSpeedTime.mat file does not exist.');
            return;
        end
        load(fullPath,'speedOverTime','param');
        paramSpeed = param;
        
        fullPath = [paths(i,:) filenames(i,:) '_PeakFRAlignedCtrl_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];    
        if(exist(fullPath) == 0)
            disp('The _PeakFRAligned file does not exist');
            return;
        end
        load(fullPath,'trialNoNonStim');
        
        fileNameFW = [filenames(i,:) '_FieldSpCorr_GoodTr_Run1.mat'];
        fullPath = [paths(i,:) fileNameFW];
        if(exist(fullPath) == 0)
            disp(['The field detection file does not exist. Please call ',...
                    'function "FieldDetection_GoodTr" first.']);
            return;
        end
        load(fullPath,'paramF'); 
                
        beh.spaceStepsLick = paramLick.spaceSteps;
        beh.spaceStepsSpeed = paramSpeed.spaceSteps;
        beh.task = [beh.task task];
        beh.indRec = [beh.indRec i];  
        
        if(~isempty(trialNoNonStim) & length(trialNoNonStim) > paramF.minNumTr)
            if(isempty(beh.meanLickPerRec))
                beh.meanLickPerRec = mean(lickOverTime.Run(trialNoNonStim,:));
                beh.semLickPerRec = std(lickOverTime.Run(trialNoNonStim,:))...
                                        /sqrt(length(trialNoNonStim));

                beh.meanSpeedPerRec = mean(speedOverTime.Run(trialNoNonStim,:));
                beh.semSpeedPerRec = std(speedOverTime.Run(trialNoNonStim,:))...
                                        /sqrt(length(trialNoNonStim));
            else
                beh.meanLickPerRec = [beh.meanLickPerRec; mean(lickOverTime.Run(trialNoNonStim,:))];
                beh.semLickPerRec = [beh.semLickPerRec; std(lickOverTime.Run(trialNoNonStim,:))...
                                        /sqrt(length(trialNoNonStim))];

                beh.meanSpeedPerRec = [beh.meanSpeedPerRec; mean(speedOverTime.Run(trialNoNonStim,:))];
                beh.semSpeedPerRec = [beh.semSpeedPerRec; std(speedOverTime.Run(trialNoNonStim,:))...
                                        /sqrt(length(trialNoNonStim))];
            end
        end
        
        nTr = length(trialNoNonStim);
        if(nTr > randTrNo)
            indTrR = randperm(nTr);
            beh.lickTracePerRec{i} = lickOverTime.Run(trialNoNonStim(indTrR(1:randTrNo)),:);
            beh.speedTracePerRec{i} = speedOverTime.Run(trialNoNonStim(indTrR(1:randTrNo)),:);
        else
            beh.lickTracePerRec{i} = lickOverTime.Run(trialNoNonStim,:);
            beh.speedTracePerRec{i} = speedOverTime.Run(trialNoNonStim,:);
        end
    end
    
    behMean.lickTraceAll = [];
    for i = 1:length(beh.lickTracePerRec)
        behMean.lickTraceAll = [...
            behMean.lickTraceAll; ...
            beh.lickTracePerRec{i}];
    end  
    behMean.speedTraceAll = [];
    for i = 1:length(beh.speedTracePerRec)
        behMean.speedTraceAll = [...
            behMean.speedTraceAll; ...
            beh.speedTracePerRec{i}];
    end  
    behMean.meanLickTrace = ...
        mean(behMean.lickTraceAll);
    behMean.semLickTrace = ...
        std(behMean.lickTraceAll)/...
        sqrt(size(behMean.lickTraceAll,1)); 
    behMean.meanSpeedTrace = ...
        mean(behMean.speedTraceAll);
    behMean.semSpeedTrace = ...
        std(behMean.speedTraceAll)/...
        sqrt(size(behMean.speedTraceAll,1));
    
    behMean.meanMeanLick = ...
        mean(beh.meanLickPerRec);
    behMean.semMeanLick = ...
        std(beh.meanLickPerRec)/...
        sqrt(size(beh.meanLickPerRec,1)); 
    behMean.meanMeanSpeed = ...
        mean(beh.meanSpeedPerRec);
    behMean.semMeanSpeed = ...
        std(beh.meanSpeedPerRec)/...
        sqrt(size(beh.meanSpeedPerRec,1));
end

function behMeanStat = accumMeanBehStatALNocue(behAL,behNoCue,behMeanAL,behMeanNoCue)
    sampFq = 1250;
    %% total mean
    spaceStepsLick = behAL.spaceStepsLick;
    spaceStepsSpeed = behAL.spaceStepsSpeed;
    
    indLickBef4s = find(spaceStepsLick >= 0 & spaceStepsLick < 4*sampFq);
    behMeanStat.indLickBef4s = indLickBef4s;
    behMeanStat.meanLickPerRec = [...
        mean(mean(behAL.meanLickPerRec(:,indLickBef4s),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLickBef4s),2))];
    behMeanStat.stdLickPerRec = [...
        std(mean(behAL.meanLickPerRec(:,indLickBef4s),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLickBef4s),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLickBef4s),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLickBef4s),[],1));
    
    behMeanStat.pRSMeanLickMean = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLickBef4s),2),...
        mean(behNoCue.meanLickPerRec(:,indLickBef4s),2));
            
    behMeanStat.pRSMeanLickTrace = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLickBef4s),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLickBef4s),2));

    %% before 2 sec
    indLickBef2s = find(spaceStepsLick >= 0 & spaceStepsLick < 2*sampFq);
    behMeanStat.indLickBef2s = indLickBef2s;
    behMeanStat.meanLickPerRecBef2s = [...
        mean(mean(behAL.meanLickPerRec(:,indLickBef2s),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLickBef2s),2))];
    behMeanStat.stdLickPerRecBef2s = [...
        std(mean(behAL.meanLickPerRec(:,indLickBef2s),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLickBef2s),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTraceBef2s = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLickBef2s),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLickBef2s),[],1));
    
    behMeanStat.pRSMeanLickMeanBef2s = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLickBef2s),2),...
        mean(behNoCue.meanLickPerRec(:,indLickBef2s),2));
            
    behMeanStat.pRSMeanLickTraceBef2s = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLickBef2s),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLickBef2s),2));
    
    %% before 1 sec
    indLickBef1s = find(spaceStepsLick >= 0 & spaceStepsLick < sampFq);
    behMeanStat.indLickBef1s = indLickBef1s;
    behMeanStat.meanLickPerRecBef1s = [...
        mean(mean(behAL.meanLickPerRec(:,indLickBef1s),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLickBef1s),2))];
    behMeanStat.stdLickPerRecBef1s = [...
        std(mean(behAL.meanLickPerRec(:,indLickBef1s),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLickBef1s),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTraceBef1s = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLickBef1s),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLickBef1s),[],1));
    
    behMeanStat.pRSMeanLickMeanBef1s = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLickBef1s),2),...
        mean(behNoCue.meanLickPerRec(:,indLickBef1s),2));
            
    behMeanStat.pRSMeanLickTraceBef1s = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLickBef1s),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLickBef1s),2));
       
    %% between 1 and 2 sec
    indLick1to2s = find(spaceStepsLick >= sampFq & spaceStepsLick < 2*sampFq);
    behMeanStat.indLick1to2s = indLick1to2s;
    behMeanStat.meanLickPerRec1to2s = [...
        mean(mean(behAL.meanLickPerRec(:,indLick1to2s),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick1to2s),2))];
    behMeanStat.stdLickPerRec1to2s = [...
        std(mean(behAL.meanLickPerRec(:,indLick1to2s),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick1to2s),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace1to2s = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick1to2s),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick1to2s),[],1));
    
    behMeanStat.pRSMeanLickMean1to2s = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick1to2s),2),...
        mean(behNoCue.meanLickPerRec(:,indLick1to2s),2));
            
    behMeanStat.pRSMeanLickTrace1to2s = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick1to2s),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick1to2s),2));
           
    %% between 2 to 3 sec
    indLick2to3s = find(spaceStepsLick >= 2*sampFq & spaceStepsLick < 3*sampFq);
    behMeanStat.indLick2to3s = indLick2to3s;
    behMeanStat.meanLickPerRec2to3s = [...
        mean(mean(behAL.meanLickPerRec(:,indLick2to3s),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick2to3s),2))];
    behMeanStat.stdLickPerRec2to3s = [...
        std(mean(behAL.meanLickPerRec(:,indLick2to3s),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick2to3s),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace2to3s = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick2to3s),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick2to3s),[],1));
    
    behMeanStat.pRSMeanLickMean2to3s = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick2to3s),2),...
        mean(behNoCue.meanLickPerRec(:,indLick2to3s),2));
            
    behMeanStat.pRSMeanLickTrace2to3s = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick2to3s),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick2to3s),2));
           
    %% between 3 to 4 sec
    indLick3to4s = find(spaceStepsLick >= 3*sampFq & spaceStepsLick < 4*sampFq);
    behMeanStat.indLick3to4s = indLick3to4s;
    behMeanStat.meanLickPerRec3to4s = [...
        mean(mean(behAL.meanLickPerRec(:,indLick3to4s),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick3to4s),2))];
    behMeanStat.stdLickPerRec3to4s = [...
        std(mean(behAL.meanLickPerRec(:,indLick3to4s),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick3to4s),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace3to4s = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick3to4s),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick3to4s),[],1));
    
    behMeanStat.pRSMeanLickMean3to4s = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick3to4s),2),...
        mean(behNoCue.meanLickPerRec(:,indLick3to4s),2));
            
    behMeanStat.pRSMeanLickTrace3to4s = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick3to4s),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick3to4s),2));
           
    
    %% total mean before 4s
    indSpeedBef4s = find(spaceStepsSpeed >= 0 & spaceStepsSpeed < 4*sampFq);
    behMeanStat.indSpeedBef4s = indSpeedBef4s;
    behMeanStat.meanSpeedPerRecBef4s = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeedBef4s))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeedBef4s)))];
    behMeanStat.stdSpeedPerRecBef4s = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeedBef4s),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeedBef4s),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTraceBef4s = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeedBef4s),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeedBef4s),[],1));
    
    behMeanStat.pRSMeanSpeedMeanBef4s = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeedBef4s),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeedBef4s),2));
            
    behMeanStat.pRSMeanSpeedTraceBef4s = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeedBef4s),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeedBef4s),2));
    
    %% before 2 sec
    indSpeedBef2s = find(spaceStepsSpeed >= 0 & spaceStepsSpeed < 2*sampFq);
    behMeanStat.indSpeedBef2s = indSpeedBef2s;
    behMeanStat.meanSpeedPerRecBef2s = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeedBef2s))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeedBef2s)))];
    behMeanStat.stdSpeedPerRecBef2s = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeedBef2s),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeedBef2s),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTraceBef2s = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeedBef2s),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeedBef2s),[],1));
    
    behMeanStat.pRSMeanSpeedMeanBef2s = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeedBef2s),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeedBef2s),2));
            
    behMeanStat.pRSMeanSpeedTraceBef2s = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeedBef2s),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeedBef2s),2));
    
    %% before 1 sec
    indSpeedBef1s = find(spaceStepsSpeed >= 0 & spaceStepsSpeed < sampFq);
    behMeanStat.indSpeedBef1s = indSpeedBef1s;
    behMeanStat.meanSpeedPerRecBef1s = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeedBef1s))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeedBef1s)))];
    behMeanStat.stdSpeedPerRecBef1s = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeedBef1s),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeedBef1s),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTraceBef1s = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeedBef1s),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeedBef1s),[],1));
    
    behMeanStat.pRSMeanSpeedMeanBef1s = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeedBef1s),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeedBef1s),2));
            
    behMeanStat.pRSMeanSpeedTraceBef1s = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeedBef1s),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeedBef1s),2));
    
    %% between 1-2 sec
    indSpeed1to2s = find(spaceStepsSpeed >= sampFq & spaceStepsSpeed < 2*sampFq);
    behMeanStat.indSpeed1to2s = indSpeed1to2s;
    behMeanStat.meanSpeedPerRec1to2s = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeed1to2s))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeed1to2s)))];
    behMeanStat.stdSpeedPerRec1to2s = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeed1to2s),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeed1to2s),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTrace1to2s = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeed1to2s),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeed1to2s),[],1));
    
    behMeanStat.pRSMeanSpeedMean1to2s = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeed1to2s),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeed1to2s),2));
            
    behMeanStat.pRSMeanSpeedTrace1to2s = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeed1to2s),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeed1to2s),2));
       
   
    %% between 2-3 sec
    indSpeed2to3s = find(spaceStepsSpeed >= 2*sampFq & spaceStepsSpeed < 3*sampFq);
    behMeanStat.indSpeed2to3s = indSpeed2to3s;
    behMeanStat.meanSpeedPerRec2to3s = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeed2to3s))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeed2to3s)))];
    behMeanStat.stdSpeedPerRec2to3s = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeed2to3s),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeed2to3s),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTrace2to3s = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeed2to3s),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeed2to3s),[],1));
    
    behMeanStat.pRSMeanSpeedMean2to3s = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeed2to3s),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeed2to3s),2));
            
    behMeanStat.pRSMeanSpeedTrace2to3s = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeed2to3s),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeed2to3s),2));
    
    %% between 3-4 sec
    indSpeed3to4s = find(spaceStepsSpeed >= 3*sampFq & spaceStepsSpeed < 4*sampFq);
    behMeanStat.indSpeed3to4s = indSpeed3to4s;
    behMeanStat.meanSpeedPerRec3to4s = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeed3to4s))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeed3to4s)))];
    behMeanStat.stdSpeedPerRec3to4s = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeed3to4s),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeed3to4s),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTrace3to4s = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeed3to4s),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeed3to4s),[],1));
    
    behMeanStat.pRSMeanSpeedMean3to4s = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeed3to4s),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeed3to4s),2));
            
    behMeanStat.pRSMeanSpeedTrace3to4s = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeed3to4s),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeed3to4s),2));
    
end

function plotLick(pathAnal,spaceStepsLick,lickField,lickNoField,leg,fileName1)
    options.handle     = figure;
    set(options.handle,'OuterPosition',...
        [500 500 280 280])
    options.color_areaX = [27 117 187]./255;    % Blue theme
    options.color_lineX = [ 39 169 225]./255;
    options.color_areaY = [187 189 192]./255;    % Orange theme
    options.color_lineY = [167 169  171]./255;
    options.alpha      = 0.5;
    options.line_width = 0.5;
    options.error      = 'sem';
    options.x_axisX = spaceStepsLick/1250;
    options.x_axisY = spaceStepsLick/1250;
    plot_areaerrorbarXY(lickField, lickNoField,...
        options);
    set(gca,'XLim',[0 4]);
    xlabel('Time (s)')
    ylabel('Num. licks')
    legend('',leg{1},'',leg{2})
    
    saveas(gcf,fileName1);
    print('-painters', '-dpdf', fileName1, '-r600')
end

function plotSpeed(pathAnal,spaceStepsSpeed,speedField,speedNoField,leg,fileName1)
    options.handle     = figure;
    set(options.handle,'OuterPosition',...
        [500 500 280 280])
    options.color_areaX = [27 117 187]./255;    % Blue theme
    options.color_lineX = [ 39 169 225]./255;
    options.color_areaY = [187 189 192]./255;    % Orange theme
    options.color_lineY = [167 169  171]./255;
    options.alpha      = 0.5;
    options.line_width = 0.5;
    options.error      = 'sem';
    options.x_axisX = spaceStepsSpeed/1250;
    options.x_axisY = spaceStepsSpeed/1250;
    plot_areaerrorbarXY(speedField, speedNoField,...
        options);
    set(gca,'XLim',[0 4]);
    xlabel('Time (s)')
    ylabel('Speed (cm/s) ')
    legend('',leg{1},'',leg{2})
        
    saveas(gcf,fileName1);
    print('-painters', '-dpdf', fileName1, '-r600')
end

    