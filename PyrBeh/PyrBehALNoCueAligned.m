function PyrBehALNoCueAligned(onlyRun)
% compare no cue behavior with AL behavior (only the initial recordings from AL to match the conditions)
% plot aligned to run and over distance (onlyRun should be set to 0)

    RecordingListPyrInt;  % include all the early NoCue (no blackout), PL and AL (up to A057)    
    pathAnal = ['Z:\Yingxue\Draft\PV\PyramidalBehALNoCueAligned\'];
    
    if(exist([pathAnal 'behNoCueVsAL_AlignedtoRunOverDist.mat']))
        load([pathAnal 'behNoCueVsAL_AlignedtoRunOverDist.mat']);
    end
   
    if(exist('behMeanNoCue') == 0)
        [behNoCue,behMeanNoCue] = accumBehRun(listRecordingsNoCuePath,...
                listRecordingsNoCueFileName,mazeSessionNoCue,1,onlyRun);

        [behAL,behMeanAL] = accumBehRun(listRecordingsActiveLickPath(1:10,:),...
                listRecordingsActiveLickFileName(1:10,:),mazeSessionActiveLick(1:10),2,onlyRun);
            % only included the recordings before starting stimulation
    
    
        behMeanStat = accumMeanBehStatALNocue(behAL,behNoCue,behMeanAL,behMeanNoCue);

        save([pathAnal 'behNoCueVsAL_AlignedtoRunOverDist.mat'],...
            'behNoCue','behAL','behMeanNoCue','behMeanAL','behMeanStat');
    end
    
    
    plotBehMeanALNoCue(pathAnal,behAL,behNoCue,behMeanStat);
    
    plotLick(pathAnal,behNoCue.spaceStepsLick,...
        behMeanNoCue.lickTraceAll,...
        behMeanAL.lickTraceAll,[{'NoCue'} {'AL'}],...
        [pathAnal 'LickVsDist-NoCueAL']);
    
    plotSpeed(pathAnal,behNoCue.spaceStepsSpeed,...
        behMeanNoCue.speedTraceAll,...
        behMeanAL.speedTraceAll,[{'NoCue'} {'AL'}],...
        [pathAnal 'SpeedVsDist-NoCueAL']);
    
    plotLick(pathAnal,behNoCue.spaceStepsLick,...
        behNoCue.meanLickPerRec,...
        behAL.meanLickPerRec,[{'NoCue'} {'AL'}],...
        [pathAnal 'MeanLickVsDist-NoCueAL']);
    
    plotSpeed(pathAnal,behNoCue.spaceStepsSpeed,...
        behNoCue.meanSpeedPerRec,...
        behAL.meanSpeedPerRec,[{'NoCue'} {'AL'}],...
        [pathAnal 'MeanSpeedVsDist-NoCueAL']);
    
end

function [beh,behMean] = accumBehRun(paths,filenames,mazeSess,task,onlyRun)
    randTrNo = 15;
    
    numRec = size(paths,1);
    beh = struct('task',[],...% no cue - 1, AL - 2, PL - 3
            'indRec',[],... % recording index for all the recordings
            'spaceStepsLick',[],...
            'spaceStepsSpeed',[],...
            ...
            'meanLickPerRec',[],... % mean lick profile per recording
            'semLickPerRec',[],... % mean lick trace per recording
            'lickTracePerRec',{cell(1,numRec)},...
            ...
            'meanSpeedPerRec',[],... % mean speed trace per recording
            'semSpeedPerRec',[],... % mean speed trace per recording
            'speedTracePerRec',{cell(1,numRec)});
      
    for i = 1:numRec
        fullPathLick = [filenames(i,:) '_lickDist_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];
        fullPath = [paths(i,:) fullPathLick];
        if(exist(fullPath) == 0)
            disp('_lickDist.mat file does not exist.');
            return;
        end
        load(fullPath,'lickOverDist','param');
        paramLick = param;
                
        fullPathLick = [filenames(i,:) '_lickDistCtrl_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];
        fullPath = [paths(i,:) fullPathLick];
        if(exist(fullPath) == 0)
            disp('_lickDist.mat file does not exist.');
            return;
        end
        load(fullPath,'lickOverDistCtrl');
        
        fullPathSpeed = [filenames(i,:) '_runSpeedDist_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];
        fullPath = [paths(i,:) fullPathSpeed];
        if(exist(fullPath) == 0)
            disp('_runSpeedDist.mat file does not exist.');
            return;
        end
        load(fullPath,'speedOverDist','param');
        paramSpeed = param;
        
        fullPathLick = [filenames(i,:) '_runSpeedDistCtrl_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];
        fullPath = [paths(i,:) fullPathLick];
        if(exist(fullPath) == 0)
            disp('_lickDist.mat file does not exist.');
            return;
        end
        load(fullPath,'speedOverDistCtrl');
        
        fullPath = [paths(i,:) filenames(i,:) '_PeakFRAlignedCtrl_msess' num2str(mazeSess(i)) '_Run' num2str(onlyRun) '.mat'];    
        if(exist(fullPath) == 0)
            disp('The _PeakFRAligned file does not exist');
            return;
        end
        load(fullPath,'trialNoNonStim');
        
        fileNameFW = [filenames(i,:) '_FieldSpCorr_GoodTr_Run1.mat'];
        fullPath = [paths(i,:) fileNameFW];
        if(exist(fullPath) == 0)
            disp(['The field detection file does not exist. Please call ',...
                    'function "FieldDetection_GoodTr" first.']);
            return;
        end
        load(fullPath,'paramF'); 
                
        beh.spaceStepsLick = paramLick.spaceSteps;
        beh.spaceStepsSpeed = paramSpeed.spaceSteps;
        beh.task = [beh.task task];
        beh.indRec = [beh.indRec i];  
        
        if(~isempty(trialNoNonStim) & length(trialNoNonStim) > paramF.minNumTr)
            if(isempty(beh.meanLickPerRec))
                beh.meanLickPerRec = lickOverDistCtrl.meanRunNonStim;
                beh.semLickPerRec = lickOverDistCtrl.SEMRunNonStim;

                beh.meanSpeedPerRec = speedOverDistCtrl.meanRunNonStim;
                beh.semSpeedPerRec = speedOverDistCtrl.SEMRunNonStim;
            else
                beh.meanLickPerRec = [beh.meanLickPerRec; lickOverDistCtrl.meanRunNonStim];
                beh.semLickPerRec = [beh.semLickPerRec; lickOverDistCtrl.SEMRunNonStim];

                beh.meanSpeedPerRec = [beh.meanSpeedPerRec; speedOverDistCtrl.meanRunNonStim];
                beh.semSpeedPerRec = [beh.semSpeedPerRec; speedOverDistCtrl.SEMRunNonStim];
            end
        end
        
        nTr = length(trialNoNonStim);
        if(nTr > randTrNo)
            indTrR = randperm(nTr);
            beh.lickTracePerRec{i} = lickOverDist.Run(trialNoNonStim(indTrR(1:randTrNo)),:);
            beh.speedTracePerRec{i} = speedOverDist.Run(trialNoNonStim(indTrR(1:randTrNo)),:);
        else
            beh.lickTracePerRec{i} = lickOverDist.Run(trialNoNonStim,:);
            beh.speedTracePerRec{i} = speedOverDist.Run(trialNoNonStim,:);
        end
    end
    
    behMean.lickTraceAll = [];
    for i = 1:length(beh.lickTracePerRec)
        behMean.lickTraceAll = [...
            behMean.lickTraceAll; ...
            beh.lickTracePerRec{i}];
    end  
    behMean.speedTraceAll = [];
    for i = 1:length(beh.speedTracePerRec)
        behMean.speedTraceAll = [...
            behMean.speedTraceAll; ...
            beh.speedTracePerRec{i}];
    end  
    behMean.meanLickTrace = ...
        mean(behMean.lickTraceAll);
    behMean.semLickTrace = ...
        std(behMean.lickTraceAll)/...
        sqrt(size(behMean.lickTraceAll,1)); 
    behMean.meanSpeedTrace = ...
        mean(behMean.speedTraceAll);
    behMean.semSpeedTrace = ...
        std(behMean.speedTraceAll)/...
        sqrt(size(behMean.speedTraceAll,1));
    
    behMean.meanMeanLick = ...
        mean(beh.meanLickPerRec);
    behMean.semMeanLick = ...
        std(beh.meanLickPerRec)/...
        sqrt(size(beh.meanLickPerRec,1)); 
    behMean.meanMeanSpeed = ...
        mean(beh.meanSpeedPerRec);
    behMean.semMeanSpeed = ...
        std(beh.meanSpeedPerRec)/...
        sqrt(size(beh.meanSpeedPerRec,1));
end

function behMeanStat = accumMeanBehStatALNocue(behAL,behNoCue,behMeanAL,behMeanNoCue)
    %% total mean
    spaceStepsLick = behAL.spaceStepsLick;
    spaceStepsSpeed = behAL.spaceStepsSpeed;
    
    indLickAfter30 = find(spaceStepsLick >= 300 & spaceStepsLick < 2100);
    behMeanStat.indLickAfter30 = indLickAfter30;
    behMeanStat.meanLickPerRec = [...
        mean(mean(behAL.meanLickPerRec(:,indLickAfter30),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLickAfter30),2))];
    behMeanStat.stdLickPerRec = [...
        std(mean(behAL.meanLickPerRec(:,indLickAfter30),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLickAfter30),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLickAfter30),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLickAfter30),[],1));
    
    behMeanStat.pRSMeanLickMean = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLickAfter30),2),...
        mean(behNoCue.meanLickPerRec(:,indLickAfter30),2));
            
    behMeanStat.pRSMeanLickTrace = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLickAfter30),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLickAfter30),2));

    %% distance 30 to 180; added on 8/3/2022
    indLick30to180 = find(spaceStepsLick >= 300 & spaceStepsLick < 1800);
    behMeanStat.indLick30to180 = indLick30to180;
    behMeanStat.meanLickPerRec30to180 = [...
        mean(mean(behAL.meanLickPerRec(:,indLick30to180),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick30to180),2))];
    behMeanStat.stdLickPerRec30to180 = [...
        std(mean(behAL.meanLickPerRec(:,indLick30to180),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick30to180),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace30to180 = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick30to180),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick30to180),[],1));
    
    behMeanStat.pRSMeanLickMean30to180 = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick30to180),2),...
        mean(behNoCue.meanLickPerRec(:,indLick30to180),2));
            
    behMeanStat.pRSMeanLickTrace30to180 = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick30to180),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick30to180),2));
    
    %% distance 30 to 100
    indLick30to100 = find(spaceStepsLick >= 300 & spaceStepsLick < 1000);
    behMeanStat.indLick30to100 = indLick30to100;
    behMeanStat.meanLickPerRec30to100 = [...
        mean(mean(behAL.meanLickPerRec(:,indLick30to100),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick30to100),2))];
    behMeanStat.stdLickPerRec30to100 = [...
        std(mean(behAL.meanLickPerRec(:,indLick30to100),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick30to100),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace30to100 = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick30to100),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick30to100),[],1));
    
    behMeanStat.pRSMeanLickMean30to100 = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick30to100),2),...
        mean(behNoCue.meanLickPerRec(:,indLick30to100),2));
            
    behMeanStat.pRSMeanLickTrace30to100 = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick30to100),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick30to100),2));
       
    %% distance 100 to 140
    indLick100to140 = find(spaceStepsLick >= 1000 & spaceStepsLick < 1400);
    behMeanStat.indLick100to140 = indLick100to140;
    behMeanStat.meanLickPerRec100to140 = [...
        mean(mean(behAL.meanLickPerRec(:,indLick100to140),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick100to140),2))];
    behMeanStat.stdLickPerRec100to140 = [...
        std(mean(behAL.meanLickPerRec(:,indLick100to140),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick100to140),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace100to140 = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick100to140),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick100to140),[],1));
    
    behMeanStat.pRSMeanLickMean100to140 = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick100to140),2),...
        mean(behNoCue.meanLickPerRec(:,indLick100to140),2));
            
    behMeanStat.pRSMeanLickTrace100to140 = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick100to140),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick100to140),2));
           
    %% distance 100 to 180; added on 8/3/2022
    indLick100to180 = find(spaceStepsLick >= 1000 & spaceStepsLick < 1800);
    behMeanStat.indLick100to180 = indLick100to180;
    behMeanStat.meanLickPerRec100to180 = [...
        mean(mean(behAL.meanLickPerRec(:,indLick100to180),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick100to180),2))];
    behMeanStat.stdLickPerRec100to180 = [...
        std(mean(behAL.meanLickPerRec(:,indLick100to180),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick100to180),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace100to180 = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick100to180),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick100to180),[],1));
    
    behMeanStat.pRSMeanLickMean100to180 = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick100to180),2),...
        mean(behNoCue.meanLickPerRec(:,indLick100to180),2));
            
    behMeanStat.pRSMeanLickTrace100to180 = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick100to180),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick100to180),2));
           
    %% distance 140 to 180
    indLick140to180 = find(spaceStepsLick >= 1400 & spaceStepsLick < 1800);
    behMeanStat.indLick140to180 = indLick140to180;
    behMeanStat.meanLickPerRec140to180 = [...
        mean(mean(behAL.meanLickPerRec(:,indLick140to180),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLick140to180),2))];
    behMeanStat.stdLickPerRec140to180 = [...
        std(mean(behAL.meanLickPerRec(:,indLick140to180),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLick140to180),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTrace140to180 = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLick140to180),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLick140to180),[],1));
    
    behMeanStat.pRSMeanLickMean140to180 = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLick140to180),2),...
        mean(behNoCue.meanLickPerRec(:,indLick140to180),2));
            
    behMeanStat.pRSMeanLickTrace140to180 = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLick140to180),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLick140to180),2));
           
    %% distance after 180
    indLickAfter180 = find(spaceStepsLick >= 1800 & spaceStepsLick < 2100);
    behMeanStat.indLickAfter180 = indLickAfter180;
    behMeanStat.meanLickPerRecAfter180 = [...
        mean(mean(behAL.meanLickPerRec(:,indLickAfter180),2)),...
        mean(mean(behNoCue.meanLickPerRec(:,indLickAfter180),2))];
    behMeanStat.stdLickPerRecAfter180 = [...
        std(mean(behAL.meanLickPerRec(:,indLickAfter180),2))/...
            sqrt(size(behAL.meanLickPerRec,1)),...
        std(mean(behNoCue.meanLickPerRec(:,indLickAfter180),2))/...
            sqrt(size(behNoCue.meanLickPerRec,1))];
    
    behMeanStat.pRSLickTraceAfter180 = ...
        ranksum(reshape(behMeanAL.lickTraceAll(:,indLickAfter180),[],1),...
        reshape(behMeanNoCue.lickTraceAll(:,indLickAfter180),[],1));
    
    behMeanStat.pRSMeanLickMeanAfter180 = ...
        ranksum(mean(behAL.meanLickPerRec(:,indLickAfter180),2),...
        mean(behNoCue.meanLickPerRec(:,indLickAfter180),2));
            
    behMeanStat.pRSMeanLickTraceAfter180 = ...
        ranksum(mean(behMeanAL.lickTraceAll(:,indLickAfter180),2),...
        mean(behMeanNoCue.lickTraceAll(:,indLickAfter180),2));
    
    %% total mean
    behMeanStat.meanSpeedPerRec = [...
        mean(behAL.meanSpeedPerRec(:)),...
        mean(behNoCue.meanSpeedPerRec(:))];
    behMeanStat.stdSpeedPerRec = [...
        std(mean(behAL.meanSpeedPerRec,2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec,2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTrace = ...
        ranksum(behMeanAL.speedTraceAll(:),...
        behMeanNoCue.speedTraceAll(:));
    
    behMeanStat.pRSMeanSpeedMean = ...
        ranksum(mean(behAL.meanSpeedPerRec,2),...
        mean(behNoCue.meanSpeedPerRec,2));
    
    behMeanStat.pRSMeanSpeedTracePerRec = ...
        ranksum(mean(behMeanAL.speedTraceAll,2),...
        mean(behMeanNoCue.speedTraceAll,2));
    
    %% distance 0 to 180; added on 8/3/2022
    indSpeed0to180 = find(spaceStepsSpeed >= 0 & spaceStepsSpeed < 1800);
    behMeanStat.indSpeed0to180 = indSpeed0to180;
    behMeanStat.meanSpeedPerRec0to180 = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeed0to180))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeed0to180)))];
    behMeanStat.stdSpeedPerRec0to180 = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeed0to180),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeed0to180),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTrace0to180 = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeed0to180),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeed0to180),[],1));
    
    behMeanStat.pRSMeanSpeedMean0to180 = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeed0to180),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeed0to180),2));
            
    behMeanStat.pRSMeanSpeedTrace0to180 = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeed0to180),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeed0to180),2));
    
    %% distance 0 to 30
    indSpeed0to30 = find(spaceStepsSpeed >= 0 & spaceStepsSpeed < 300);
    behMeanStat.indSpeed0to30 = indSpeed0to30;
    behMeanStat.meanSpeedPerRec0to30 = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeed0to30))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeed0to30)))];
    behMeanStat.stdSpeedPerRec0to30 = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeed0to30),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeed0to30),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTrace0to30 = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeed0to30),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeed0to30),[],1));
    
    behMeanStat.pRSMeanSpeedMean0to30 = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeed0to30),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeed0to30),2));
            
    behMeanStat.pRSMeanSpeedTrace0to30 = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeed0to30),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeed0to30),2));
    
    %% distance 30 to 100
    indSpeed30to100 = find(spaceStepsSpeed >= 300 & spaceStepsSpeed < 1000);
    behMeanStat.indSpeed30to100 = indSpeed30to100;
    behMeanStat.meanSpeedPerRec30to100 = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeed30to100))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeed30to100)))];
    behMeanStat.stdSpeedPerRec30to100 = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeed30to100),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeed30to100),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTrace30to100 = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeed30to100),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeed30to100),[],1));
    
    behMeanStat.pRSMeanSpeedMean30to100 = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeed30to100),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeed30to100),2));
            
    behMeanStat.pRSMeanSpeedTrace30to100 = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeed30to100),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeed30to100),2));
       
   
    %% distance > 100
    indSpeedAfter100 = find(spaceStepsSpeed >= 1000);
    behMeanStat.indSpeedAfter100 = indSpeedAfter100;
    behMeanStat.meanSpeedPerRecAfter100 = [...
        mean(mean(behAL.meanSpeedPerRec(:,indSpeedAfter100))),...
        mean(mean(behNoCue.meanSpeedPerRec(:,indSpeedAfter100)))];
    behMeanStat.stdSpeedPerRecAfter100 = [...
        std(mean(behAL.meanSpeedPerRec(:,indSpeedAfter100),2))/...
            sqrt(size(behAL.meanSpeedPerRec,1)),...
        std(mean(behNoCue.meanSpeedPerRec(:,indSpeedAfter100),2))/...
            sqrt(size(behNoCue.meanSpeedPerRec,1))];
        
    behMeanStat.pRSSpeedTraceAfter100 = ...
        ranksum(reshape(behMeanAL.speedTraceAll(:,indSpeedAfter100),[],1),...
        reshape(behMeanNoCue.speedTraceAll(:,indSpeedAfter100),[],1));
    
    behMeanStat.pRSMeanSpeedMeanAfter100 = ...
        ranksum(mean(behAL.meanSpeedPerRec(:,indSpeedAfter100),2),...
        mean(behNoCue.meanSpeedPerRec(:,indSpeedAfter100),2));
            
    behMeanStat.pRSMeanSpeedTraceAfter100 = ...
        ranksum(mean(behMeanAL.speedTraceAll(:,indSpeedAfter100),2),...
        mean(behMeanNoCue.speedTraceAll(:,indSpeedAfter100),2));
    
end
    